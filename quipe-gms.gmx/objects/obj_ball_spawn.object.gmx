<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spawn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sinCurrent = 0;
sinSpeed = 9;

x = room_width / 2;

xMin = room_width * 0.125;
xMax = room_width * 0.875;

movingRight = true;

movementSpeed = 5;

message = "";

//alarm[2] = 60; //set folder
hasShownError = false;
poll = noone;
pinging = true;
folderRequest = http_get("http://localhost:5000/folder?name=users");
scores = noone;
alarm[5] = 1;

balls = 0;
swipes = 0;

if (room == rm_quipe2) {
    view_xview[0] = room_width * 0.5 * -1;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///colors

colors = -1;
colors[0] = make_colour_rgb(255, 170, 170); //pastel light red
colors[1] = make_colour_rgb(255, 223, 183); //pastel orange
colors[2] = make_colour_rgb(247, 255, 124); //pastel yellow
colors[3] = make_colour_rgb(171, 240, 235); //pastel teal
colors[4] = make_colour_rgb(128, 208, 226); //pastel bluish purple?
colors[5] = make_colour_rgb(251,172,130); //pastel darker orange
colors[6] = make_colour_rgb(225,233,252); //pastel sky blue
colors[7] = make_colour_rgb(171,206,175); //forest green?
colors[8] = make_colour_rgb(216,238,184); //brighter green?
colors[9] = make_colour_rgb(173,162,255); //it's another purple thing
colors[10] = make_colour_rgb(255,254,225); //an even paler green/orange thing
colors[11] = make_colour_rgb(177,177,254); //another blue
colors[12] = make_colour_rgb(244,201,231); //a pink?
colors[13] = make_colour_rgb(115, 115, 115); //a gray.
colors[14] = make_colour_rgb(253, 111, 127); //pastel dark red
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create scores list
scores = -1;

for (var i = 0; i &lt; 10; i++) {
    var j = irandom_range(1, 15);
    while (isInList(scores, j)) {
        j = irandom_range(1, 15);
    }
    scores[i] = j;
    
}


global.scoresIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var folderName = get_string("What folder name?", "");
folderRequest = http_get("http://localhost:5000/folder?name=" + folderName);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///poll

poll = http_get("http://localhost:5000/queue");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear message
message = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (movingRight) {
    x += movementSpeed;
    if (x &gt;= xMax) {
        movingRight = false;
    }   
} else {
    x -= movementSpeed;
    if (x &lt;= xMin) {
        movingRight = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///poll response
if (ds_map_find_value(async_load, "id") == poll) {
    if (ds_map_find_value(async_load, "status") == 0) {
        var str = ds_map_find_value(async_load, "result");
        if (!(string_length(str) == 3 &amp;&amp; (substring(str, 1, 1) == "0" || substring(str, 1, 1) == "1"))) {
            //something queued!
            swipes += 1;
            balls += 1;
            keyboard_string = ";0" + substring(str, 1, 8) + "01?";
            show_debug_message(str);
            show_debug_message(keyboard_string);
            event_user(0);
        } else if (substring(str, 1, 1) == "1") {
            balls += 1;
            keyboard_string = "";
            if (instance_number(obj_ball) &lt; 100) {
                show_debug_message("Dummy ball.");
                event_user(0);
            }
        }
        poll = http_get("http://localhost:5000/queue");
    } else if (ds_map_find_value(async_load, "status") &lt; 0) {
        //error?
            message = "Offline mode enabled.#Press Enter to drop a dummy ball!";
            alarm[0] = 360;
            hasShownError = true;
        
    }
} else if (ds_map_find_value(async_load, "id") == folderRequest) {
    if (ds_map_find_value(async_load, "status") == 0) {
        if (pinging) {
            pinging = false;
            alarm[2] = 1;
        } else {
            alarm[1] = 1;
        }
    } else if (ds_map_find_value(async_load, "status") &lt; 0) {
        message = "Offline mode enabled.#Press Enter to drop a dummy ball!";
        alarm[0] = 360;
        hasShownError = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message(keyboard_string);

var b = instance_create(x, y, obj_ball);
if (string_length(keyboard_string) &gt;= 12)
    b.ID = substring(keyboard_string, 2, 8);
keyboard_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (balls != 0) {
    draw_set_font(fnt_mono_smaller);
    draw_set_halign(fa_left);
    draw_set_color(c_white);
    
    draw_text(16, 64, "Balls Dropped: " + string(balls));
    
    draw_set_color(make_color_rgb(30, 30, 30));
    draw_text(15, 63, "Balls Dropped: " + string(balls));
}
/*
if (swipes != 0) {
    draw_set_font(fnt_mono_smaller);
    draw_set_halign(fa_left);
    draw_set_color(c_white);
    
    draw_text(16, 24, "Swipes: " + string(swipes));
    
    draw_set_color(make_color_rgb(30, 30, 30));
    draw_text(15, 23, "Swipes: " + string(swipes));
}*/


if (message != "") {
    draw_set_font(fnt_mono_bigger);
    draw_set_halign(fa_center);
    draw_set_color(c_white);
    
    var dX = room_width / 2;
    var dY = room_height * 0.025;
    
    
    draw_text(dX, dY, message);
    draw_set_color(make_color_rgb(30, 30, 30));
    draw_text(dX - 1, dY - 1, message);
}



sinCurrent += sinSpeed;
draw_sprite(sprite_index, 0, x, y + (dsin(sinCurrent) * 10));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_quipe)
    room_goto(rm_quipe2);
else
    room_goto(rm_quipe);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hasShownError) {
    balls += 1;
    event_user(0);
}
else {
    balls += 1;
    keyboard_string = "";
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
